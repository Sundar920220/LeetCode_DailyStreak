class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n = points.length;
        List<Edge> edges = new ArrayList<>();
        
        // Create edges between all pairs of points
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int cost = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
                edges.add(new Edge(i, j, cost));
            }
        }
        
        // Sort the edges by their cost
        Collections.sort(edges, (a, b) -> a.cost - b.cost);
        
        int minCost = 0;
        int[] parent = new int[n];
        Arrays.fill(parent, -1);
        
        for (Edge edge : edges) {
            int u = find(parent, edge.src);
            int v = find(parent, edge.dest);
            
            if (u != v) {
                minCost += edge.cost;
                union(parent, u, v);
            }
        }
        
        return minCost;
    }
    
    private int find(int[] parent, int node) {
        if (parent[node] == -1)
            return node;
        return parent[node] = find(parent, parent[node]);
    }
    
    private void union(int[] parent, int u, int v) {
        int uParent = find(parent, u);
        int vParent = find(parent, v);
        parent[uParent] = vParent;
    }
}

class Edge {
    int src, dest, cost;
    
    public Edge(int src, int dest, int cost) {
        this.src = src;
        this.dest = dest;
        this.cost = cost;
    }
}
